    # add CCA   def variance_cca(date):     # setup pytorch stuff     device = torch.device('cpu')     dtype = torch.float     print(date)     ## Load in saved data     print('loading data')     with open(os.path.join(config.datadir, 'fits_offline', f'data_{date}.pkl'), 'rb') as f:         trainData, testData, inIDXList, outIDXList, trial_num = pickle.load(f)     print('data loaded')      neu_test = torch.from_numpy(testData['neu3D']).to(device, dtype)     vel_test = torch.from_numpy(testData['vel']).to(device, dtype)      num_models = 100     num_models_compared = 10      # model architecture     in_size = neu_test.shape[1]     layer_size = 256     ConvSize = 3     ConvSizeOut = 16     num_states = 2     num_layers = 5      # load decoders     print('loading decoders')     with open(os.path.join(config.modeldir, 'variance_offline', f'tcFNNmodels_{date}.pkl'), 'rb') as f:         tcfnn_models, tcfnn_scalers, noreg_models, noreg_scalers, tcfnn_hist, noreg_hist = pickle.load(f)     print('NN Decoder Loaded')      tcfnn_pwcca_results = np.zeros((num_layers, int(num_models_compared * (num_models_compared - 1) / 2)))     noreg_pwcca_results = np.zeros((num_layers, int(num_models_compared * (num_models_compared - 1) / 2)))          idx = np.arange(0,9)     nnidx = idx     print(f'trying models {nnidx}')      # get activations for tcfnn and noreg     tcfnn_activations = []     noreg_activations = []     for j in nnidx:         def get_activations(modeltype, oldmodel):             model = modeltype(in_size, layer_size, ConvSize, ConvSizeOut, num_states).to(device)             model.load_state_dict(oldmodel.state_dict())              model.eval()             model_activations = model.forward(neu_test)             model_activations = [torch.transpose(x, 0, 1).cpu().detach().numpy() for x in model_activations]              return model_activations          tcfnn_activations.append(get_activations(NNDecoders.tcFNN_activations, tcfnn_models[j]))         noreg_activations.append(get_activations(NNDecoders.noregtcfnn_activations, noreg_models[j]))         print(f'model {j} loaded')      # run pwcca analysis on each pair     for j, combo in enumerate(combinations(idx, 2)):         print(f'trying pair {combo}')         for k in (1,2,3,4):             try:                 tcfnn_pwcca, tcfnn_weights, tcfnn_coeffs = pwcca.compute_pwcca(tcfnn_activations[combo[0]][k],                                                                                tcfnn_activations[combo[1]][k],                                                                                epsilon=1e-10)                 noreg_pwcca, noreg_weights, noreg_coeffs = pwcca.compute_pwcca(noreg_activations[combo[0]][k],                                                                                noreg_activations[combo[1]][k],                                                                                epsilon=1e-10)                  tcfnn_pwcca_results[k, j] = tcfnn_pwcca                 noreg_pwcca_results[k, j] = noreg_pwcca             except:                 print(f'layer {k} failed')       # calculate mean pwcca over pair-wise comparisions     print('plotting pwcca')      plt.plot(tcfnn_pwcca_results, color=config.offlineVariancePalette[1,:])     plt.plot(noreg_pwcca_results, color=config.offlineVariancePalette[2,:])     plt.show()      return 0
